import os
import imp

from gettext import gettext as _

from gi.repository import GObject
from gi.repository import Gtk
from gi.repository import Gdl

from logobject import LogObject
from pluginengine import get_default_plugin_engine
from pluginmanager import PluginManager
import icons

class Window(Gtk.Window, LogObject):
    """
    Window
    
    Represents a main application window.
    """
    def __init__(self, application):
        Gtk.Window.__init__(self)
        self.init_logging(application.log_level)
        self._data_dir = application.get_data_dir()
        self._ui_manager = self._init_ui_manager()
        
        self.set_default_size(300, 300) # minimum size
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL) # main layout box
        
        # menu and toolbar
        menu, toolbar = self._init_menu_and_toolbar(self._ui_manager)
        box.pack_start(menu, False, False, 0)
        self._toolbar_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        box.pack_start(toolbar, False, False, 0)
        
        #dock
        dockbox = self._init_dock()
        box.pack_start(dockbox, True, True, 0)        
        
        # statusbar
        box.pack_end(Gtk.Statusbar(), False, False, 0)
        box.show_all()
        self.add(box)
        
        self._init_plugins()

    def _init_dock(self):
        """ Initialize the dock. """
        # main editor area
        editor = Gdl.DockItem.new_with_stock("editor", "Editor", 
                                             Gtk.STOCK_EDIT, 
                                             Gdl.DockItemBehavior.NO_GRIP |
                                             Gdl.DockItemBehavior.LOCKED |
                                             Gdl.DockItemBehavior.CANT_CLOSE |
                                             Gdl.DockItemBehavior.CANT_ICONIFY)
        widget = Gtk.TextView()
        widget.set_size_request(100, 100)
        widget.set_hexpand(True)
        editor.add(widget)
        editor.show_all()
        
        # dock
        dock = Gdl.Dock()
        dockbar = Gdl.DockBar.new(dock)
        # bug 667158 https://bugzilla.gnome.org/show_bug.cgi?id=667158
        dockbar.set_homogeneous(False)
        dockbar.set_style(Gdl.DockBarStyle.ICONS)
        # TODO make placement (left, top, right, bottom) and style configurable
        dockbox = Gtk.HBox(False, 0)
        dockbox.pack_start(dockbar, False, False, 0)
        dockbox.pack_start(dock, True, True, 0)
        
        dock.add_item(editor, Gdl.DockPlacement.CENTER)
        
        # phony dock widgets for testing
        item = Gdl.DockItem.new_with_stock("terminal", "Terminal",
                                               Gtk.STOCK_NETWORK,
                                               Gdl.DockItemBehavior.NORMAL)
        item.add(Gtk.TextView())                                
        dock.add_item(item, Gdl.DockPlacement.BOTTOM)
        
        # phony dock widgets for testing
        item = Gdl.DockItem.new_with_stock("plugin-manager", "Plugin Manager",
                                           icons.STOCK_PLUGIN,
                                           Gdl.DockItemBehavior.NORMAL)
        item.add(PluginManager(self._data_dir, get_default_plugin_engine()))                                
        dock.add_item(item, Gdl.DockPlacement.LEFT)
        
        # phony dock widgets for testing
        
        """
        item = Gdl.DockItem.new_with_stock("stock-icons", "Stock Icon Test",
                                               Gtk.STOCK_CONVERT,
                                               Gdl.DockItemBehavior.NORMAL)
        widget = Gtk.Grid()
        for size in range(1, 7):
            image = Gtk.Image.new_from_stock(icons.STOCK_PLUGIN, size)
            image.set_tooltip_text(str(size))
            widget.add(image)
            image = Gtk.Image.new_from_stock(Gtk.STOCK_NETWORK, size)
            image.set_tooltip_text(str(size))
            widget.add(image)
            
        widget.show_all()
        item.add(widget)                                
        dock.add_item(item, Gdl.DockPlacement.RIGHT)
        """
        return dockbox
    
    def _init_menu_and_toolbar(self, manager):
        """ Initialize main menu from external UI definitions. """
        actions = Gtk.ActionGroup("AppActions")
        actions.add_actions([
            ('File', None, '_File', None, None, None),
            ('Edit', None, '_Edit', None, None, None),
            ('Help', None, '_Help', None, None, None),
            ('New', Gtk.STOCK_NEW, None, None, None, 
                self.on_file_new_activate),
            ('Open', Gtk.STOCK_OPEN, _("Open..."), None, None, 
                self.on_file_open_activate),
            ('Quit', Gtk.STOCK_QUIT, None, None, None, 
                self.on_file_quit_activate),
            ('About', Gtk.STOCK_ABOUT, _("About..."), None, None, 
                self.on_help_about_activate),
        ])
        manager.insert_action_group(actions)
        
        # available to the current document only
        self._file_action_group = Gtk.ActionGroup("FileActions")
        self._file_action_group.add_actions([
            ('Save', Gtk.STOCK_SAVE, None, None, None, 
                self.on_file_new_activate),
            ('SaveAs', Gtk.STOCK_SAVE_AS, _("Save As..."), None, None, 
                self.on_file_open_activate),
            ('Close', Gtk.STOCK_CLOSE, None, None, None, 
                self.on_file_close_activate),
            ('Cut', Gtk.STOCK_CUT, None, None, None, 
                self.on_edit_cut_activate),
            ('Copy', Gtk.STOCK_COPY, None, None, None, 
                self.on_edit_copy_activate),
            ('Paste', Gtk.STOCK_PASTE, None, None, None, 
                self.on_edit_paste_activate),
        ])
        self._file_action_group.set_sensitive(False)
        manager.insert_action_group(self._file_action_group)
        
        ui_file = os.path.join(self._data_dir, "ui", "menu_and_toolbar.ui")
        self.debug("Loading UI definitions from %s" % ui_file)
        manager.add_ui_from_file(ui_file)
        menu = manager.get_widget("ui/MainMenu")
        toolbar = manager.get_widget("ui/MainToolbar")
        context = toolbar.get_style_context()
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)
        return (menu, toolbar)     
    
    def _init_plugins(self):
        pass

        """
        active_plugins = ['terminal',] # TODO: from gsettings
        for plugin in active_plugins:
            loaded = False
            for path in self._plugin_dirs:
                
                info_file = os.path.join(path, plugin, plugin+".plugin")
                module_file = os.path.join(path, plugin, plugin+".py")
                print "%s (%s)" % (info_file, os.path.exists(info_file))
                print "%s (%s)" % (module_file, os.path.exists(module_file))
                if os.path.exists(info_file) and os.path.exists(module_file):
                    self.debug("Loading '%s' plugin from %s" % (plugin, path))
                    loaded = True
                    module = imp.load_source(plugin, module_file)
                    plugin = module.Plugin()
                    plugin.window = self
                    plugin.do_activate()
                if loaded:
                    break
        """
        
    def _init_ui_manager(self):
        """ Initialize the GtkUIManager for this window. """
        manager = Gtk.UIManager()
        accelgroup = manager.get_accel_group()
        self.add_accel_group(accelgroup)
        
        return manager
    
    def on_file_new_activate(self, action, data=None):
        pass
    
    def on_file_open_activate(self, action, data=None):
        pass
        
    def on_file_save_activate(self, action, data=None):
        pass
    
    def on_file_save_as_activate(self, action, data=None):
        pass
    
    def on_file_close_activate(self, action, data=None):
        pass
        
    def on_file_quit_activate(self, action, data=None):
        self.destroy()
    
    def on_edit_cut_activate(self, action, data=None):
        pass
    
    def on_edit_copy_activate(self, action, data=None):
        pass
    
    def on_edit_paste_activate(self, action, data=None):
        pass
    
    def on_tools_plugins_activate(self, action, data=None):
        dialog = Gtk.Dialog(_("Plugins"), self, 
                            Gtk.DialogFlags.DESTROY_WITH_PARENT,
                            (Gtk.STOCK_CLOSE, Gtk.ResponseType.CLOSE))
        dialog.connect("response", lambda a,b: dialog.destroy())
        dialog.set_default_size(300, 250)
        box = dialog.get_content_area()
        box.set_margin_left(0)
        manager = PluginManager(self._data_dir, get_default_plugin_engine())
        box.add(manager)
        box.show_all()
        dialog.show()
        
        
        
