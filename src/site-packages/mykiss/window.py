# coding=utf8

import os
from gettext import gettext as _
import ConfigParser
from xdg.BaseDirectory import save_config_path

from gi.repository import GObject
from gi.repository import Gtk
from gi.repository import Gdl

from yapsy.PluginManager import PluginManagerSingleton

from logobject import LogObject
import icons

class Window(Gtk.Window, LogObject):
    """
    Main application window derived from `Gtk.Window`.
    
    Args:
        application -- The `mykiss.Application` instance creating the `Window`
    """    
    def __init__(self, application):
        LogObject.__init__(self)
        Gtk.Window.__init__(self)

        self._application = application
        self._ui_manager = self._init_ui_manager()
        
        #self.set_default_size(300, 300) # minimum size
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL) # main layout box
        
        # menu and toolbar
        menu, toolbar = self._init_menu_and_toolbar(self._ui_manager)
        box.pack_start(menu, False, False, 0)
        self._toolbar_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        box.pack_start(toolbar, False, False, 0)
        
        #dock
        dockbox = self._init_dock()
        box.pack_start(dockbox, True, True, 0)        
        
        # statusbar
        box.pack_end(Gtk.Statusbar(), False, False, 0)
        box.show_all()
        self.add(box)

        self.connect("show", self._on_show)
        self.connect("delete-event", self._on_delete_event)

    @GObject.property
    def application(self):
        return self._application
    
    @GObject.property
    def doc_layout(self):
        return self._doc_layout
        
    def add_dock_item(self, label, widget, icon_name=icons.STOCK_PLUGIN, 
                      orientation=Gtk.Orientation.HORIZONTAL):
        """
        Add a new item to the dock. The initial placement can be suggested with
        the `orientation` argument, however, the user ultimately has control
        over the dock layout which is loaded and saved at each session.
        
        Args:
            label       -- The label for the dock item
            widget      -- The widget to display in the dock item
            icon_name   -- A registered stock icon for the dock item
            orientation -- A `Gtk.Orientation` constant
        """
        item = Gdl.DockItem.new_with_stock(label, " "+label,
                                           icon_name,
                                           Gdl.DockItemBehavior.NORMAL)
        item.add(widget)    
        #item.show()
        if orientation == Gtk.Orientation.HORIZONTAL:                            
            placement = Gdl.DockPlacement.BOTTOM
        else:
            placement = Gdl.DockPlacement.LEFT
        
        self._dock.add_item(item, placement)
        
    def _init_dock(self):
        """ Initialize the dock. """
        # main editor area
        editor = Gdl.DockItem.new_with_stock("editor", "Editor", 
                                             Gtk.STOCK_EDIT, 
                                             Gdl.DockItemBehavior.NO_GRIP |
                                             Gdl.DockItemBehavior.LOCKED |
                                             Gdl.DockItemBehavior.CANT_CLOSE |
                                             Gdl.DockItemBehavior.CANT_ICONIFY)
        widget = Gtk.TextView()
        #widget.set_size_request(200, 100) # effective minimum size
        widget.set_hexpand(True)
        editor.add(widget)
        editor.show_all()
        
        # dock
        dock = Gdl.Dock()
        dockbar = Gdl.DockBar.new(dock)
        # bug 667158 https://bugzilla.gnome.org/show_bug.cgi?id=667158
        dockbar.set_homogeneous(False)
        dockbar.set_style(Gdl.DockBarStyle.ICONS)
        # TODO make placement of the dockbar (left, top, right, bottom) and 
        # the icon style configurable
        dockbox = Gtk.HBox(False, 0)
        dockbox.pack_start(dockbar, False, False, 0)
        dockbox.pack_start(dock, True, True, 0)
        
        dock.add_item(editor, Gdl.DockPlacement.CENTER)

        self._dock = dock
        self._dock_layout = Gdl.DockLayout.new(dock)
        self._dock.connect("layout-changed", self._on_dock_layout_changed)
        self._dock_layout_file = os.path.join(
            save_config_path(self.application.package), "dock_layout.xml")
                                
        return dockbox
    
    def _init_menu_and_toolbar(self, manager):
        """ 
        Return a 2-tuple containing a Gtk.Menu and a Gtk.Toolbar representing
        the window's main menu and primary toolbar as defined in external
        UI definitions (menu_and_toolbar.ui).
        
        Args:
            manager -- The window's Gtk.UIManager instance.
        """
        actions = Gtk.ActionGroup("AppActions")
        actions.add_actions([
            ('File', None, '_File', None, None, None),
            ('Edit', None, '_Edit', None, None, None),
            ('Help', None, '_Help', None, None, None),
            ('New', Gtk.STOCK_NEW, None, None, None, 
                self._on_file_new_activate),
            ('Open', Gtk.STOCK_OPEN, _("Open..."), None, None, 
                self._on_file_open_activate),
            ('Quit', Gtk.STOCK_QUIT, None, None, None, 
                self._on_file_quit_activate),
            ('About', Gtk.STOCK_ABOUT, _("About..."), None, None, 
                self._on_help_about_activate),
        ])
        manager.insert_action_group(actions)
        
        # available to the current document only
        self._file_action_group = Gtk.ActionGroup("FileActions")
        self._file_action_group.add_actions([
            ('Save', Gtk.STOCK_SAVE, None, None, None, 
                self._on_file_new_activate),
            ('SaveAs', Gtk.STOCK_SAVE_AS, _("Save As..."), None, None, 
                self._on_file_open_activate),
            ('Close', Gtk.STOCK_CLOSE, None, None, None, 
                self._on_file_close_activate),
            ('Cut', Gtk.STOCK_CUT, None, None, None, 
                self._on_edit_cut_activate),
            ('Copy', Gtk.STOCK_COPY, None, None, None, 
                self._on_edit_copy_activate),
            ('Paste', Gtk.STOCK_PASTE, None, None, None, 
                self._on_edit_paste_activate),
        ])
        self._file_action_group.set_sensitive(False)
        manager.insert_action_group(self._file_action_group)
        
        ui_file = os.path.join(self.application.data_dir, "ui", 
                               "menu_and_toolbar.ui")
        self.debug("Loading UI definitions from %s" % ui_file)
        manager.add_ui_from_file(ui_file)
        menu = manager.get_widget("ui/MainMenu")
        toolbar = manager.get_widget("ui/MainToolbar")
        context = toolbar.get_style_context()
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)
        return (menu, toolbar)     
         
    def _init_ui_manager(self):
        """ Initialize the GtkUIManager for this window. """
        manager = Gtk.UIManager()
        accelgroup = manager.get_accel_group()
        self.add_accel_group(accelgroup)
        
        return manager
     
    def _on_file_new_activate(self, action, data=None):
        pass
    
    def _on_file_open_activate(self, action, data=None):
        pass
        
    def _on_file_save_activate(self, action, data=None):
        pass
    
    def _on_file_save_as_activate(self, action, data=None):
        pass
    
    def _on_file_close_activate(self, action, data=None):
        pass
        
    def _on_file_quit_activate(self, action, data=None):
        self.destroy()
    
    def _on_dock_layout_changed(self, dock, data=None):
        #self.save_dock_layout(self._dock_layout_file)
        pass
        
    def _on_edit_cut_activate(self, action, data=None):
        pass
    
    def _on_edit_copy_activate(self, action, data=None):
        pass
    
    def _on_edit_paste_activate(self, action, data=None):
        pass
    
    def _on_help_about_activate(self, action, data=None):
        """ Show an 'About' dialog. """
        dialog = Gtk.AboutDialog()
        dialog.set_transient_for(self)
        dialog.set_modal(True)
        dialog.set_authors(("Micah Carrick <micah@quixotix.com>",))
        dialog.set_copyright("Copyright Â© 2012, Micah Carrick")
        dialog.set_logo_icon_name(self.application.package)
        dialog.set_program_name(self.application.package_name)
        dialog.set_version(self.application.version)
        dialog.set_comments(_("A GTK+ based text editor and IDE."))
        dialog.run()
        dialog.destroy()
    
    def _on_delete_event(self, window, data=None):
        """ Window is being removed. """
        self._save_geometry()
        self.save_dock_layout(self._dock_layout_file)
        
    def _on_show(self, window, data=None):  
        """ Window is being shown. """
        config = self.application.config
        # restore window geometry
        try:
            if config.getboolean('Window', 'restore_geometry'):
                self._restore_geometry()
        except ConfigParser.NoSectionError, err:
            config.add_section('Window')
        except ConfigParser.NoOptionError, err:
            self.warning(err)

        # wait for window to size before restoring dock layout
        while Gtk.events_pending(): 
            Gtk.main_iteration()
        self.load_dock_layout(self._dock_layout_file)
    
    def load_dock_layout(self, filename, layout="default"):
        """
        Load a dock layout from a and XML file.
        
        Args:
            filename -- The XML file containing the dock layout.
            layout   -- The layout name as stored in the XML file.
        """
        if self._dock_layout.load_from_file(filename):
            self.debug("Loaded dock layout from %s", filename)
            self._dock_layout.load_layout(layout)
        else:
            self.warning("Failed to load dock layout from %s", filename)
            
    def save_dock_layout(self, filename, layout="default"):
        """
        Save the dock layout to an XML file.
        
        Args:
            filename -- The XML file containing the dock layout.
            layout   -- The layout name as stored in the XML file.
        """
        self._dock_layout.save_layout(layout)
        self._dock_layout.save_to_file(filename)
        self.debug("Saved dock layout to %s", filename)
    
    def _restore_geometry(self):
        """ Restore the window geometry from the configuration file. """
        config = self.application.config
        try:
            width = config.getint('Window', 'width')
            height = config.getint('Window', 'height')
            x = config.getint('Window', 'x')
            y = config.getint('Window', 'y')
            
            self.resize(width, height) 
            self.move(x, y)
        except ConfigParser.NoSectionError, err:
            config.add_section('Window')
        except ConfigParser.NoOptionError, err:
            self.warning(err)
            
    def _save_geometry(self):
        """ Save the window geometery to the configuration file. """
        if self.get_window().get_state() != 0:
            return # ignore if fullscreen, maximized, etc.
        size = self.get_size()
        position = self.get_position()
        config = self.application.config
        config.set('Window', 'width', str(size[0]))
        config.set('Window', 'height', str(size[1]))
        config.set('Window', 'x', str(position[0]))
        config.set('Window', 'y', str(position[1]))
        self.application.write_config()
        
