import os

from xdg.BaseDirectory import xdg_data_dirs

from gi.repository import GObject
from gi.repository import Gtk, Gio

from logobject import LogObject
from window import Window
from pluginengine import get_default_plugin_engine
import icons

class Application(Gtk.Application, LogObject):
    def __init__(self, **kwargs):
        Gtk.Application.__init__(self, application_id="apps.mykiss",
                                 flags=Gio.ApplicationFlags.FLAGS_NONE)
        
        self.init_logging(kwargs['log_level'])
        
        # autotools keyword arguments passed in run script
        for key in kwargs:
            setattr(self, '_' + key, kwargs[key])

        self.connect("activate", self.on_activate)
        self.connect("startup", self.on_startup)
    
    def add_window(self):
        window = Window(self)
        Gtk.Application.add_window(self, window)
        window.show()
        
        return window
    
    def get_data_dir(self):
        """
        Returns the data directory determined by ./configure script as passed
        to Application object when instatiated.
        """
        return self._data_dir
    
    def get_plugin_engine(self):
        return self._plugin_engine
        
    def _init_plugin_engine(self):
        self.debug("Initializing plugin engine")
        engine = get_default_plugin_engine()
        engine.set_log_level(self.log_level)
        if hasattr(self, '_plugin_dir'):
            engine.add_plugin_dir(self._plugin_dir)
            
        for path in xdg_data_dirs:
            path = os.path.join(path, self._package, "plugins")
            engine.add_plugin_dir(path)
        
        engine.set_enabled_plugins(['test', 'terminal', 'minimal'])
        self._plugin_engine = engine
        """
        self.debug("Initializing plugins")
        engine = Peas.Engine.get_default()
        engine.enable_loader("python")
        engine.enable_loader("gjs")
        
        # try add plugin_dir added as keyword argument to constructor
        try: 
            self.debug("Adding plugin path %s" % self._plugin_dir)
            engine.add_search_path(self._plugin_dir, self._plugin_dir)
        except AttributeError:
            pass
        
        # add all XDG data dirs as plugin search paths
        for path in xdg_data_dirs:
            plugin_dir = os.path.join(path, self._package, "plugins")
            self.debug("Adding plugin path %s" % plugin_dir)
            engine.add_search_path(plugin_dir, plugin_dir)
        #print engine.get_plugin_list()
        
        #es = Peas.ExtensionSet(engine=engine, extension_type=Peas.Activatable)
        # activate built-in plugins
        #plugin = engine.get_plugin_info("example")
        #print plugin.get_name()
        """
        
    def on_activate(self, data=None):
        self.debug("on_activate")
        self.add_window()
    
    def on_startup(self, data=None):
        self.debug("-"*60)
        self.debug(" %s version %s" % (self._package_name, self._version))
        self.debug("-"*60)
        self.debug("data_dir: %s" % self._data_dir)
        icons.logger.setLevel(self.log_level)
        icons.register_stock_icons(os.path.join(self._data_dir, "icons"), 
                                   icons.stock_icons)
        self._init_plugin_engine()
        
