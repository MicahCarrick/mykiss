import os
from ConfigParser import SafeConfigParser

from xdg.BaseDirectory import xdg_data_dirs, save_config_path, xdg_config_dirs

from gi.repository import GObject
from gi.repository import Gtk, Gio

from yapsy.ConfigurablePluginManager import ConfigurablePluginManager
from yapsy.VersionedPluginManager import VersionedPluginManager
from yapsy.PluginManager import PluginManagerSingleton

from logobject import LogObject
from window import Window
from plugin import MykissPlugin
import icons

class Application(Gtk.Application, LogObject):
    """
    Main application instance derived from `Gtk.Application`.
    
    Args:
        package      -- The `PACKAGE` as defined by configure.ac
        package_name -- The `PACKAGE_NAME` as defined by configure.ac
        version      -- The `VERSION` as defined by configure.ac
        data_dir     -- The data directory, typically defined by `pkgdatadir`
        plugin_dir   -- [optional] An additional directory in which to search 
                        for plugins
    """    
    def __init__(self, **kwargs):
        LogObject.__init__(self)
        Gtk.Application.__init__(self, application_id="apps.mykiss",
                                 flags=Gio.ApplicationFlags.FLAGS_NONE)

        # autotools keyword arguments passed in by the run script
        for key in kwargs:
            setattr(self, '_' + key, kwargs[key])
        
        # connect signal handlers
        self.connect("activate", self.on_activate)
        self.connect("startup", self.on_startup)
    
    @GObject.property
    def data_dir(self):
        return self._data_dir
        
    @GObject.property
    def package(self):
        return self._package
    
    @GObject.property
    def package_name(self):
        return self._package_name
    
    @GObject.property
    def version(self):
        return self._version
        
    def add_window(self):
        window = Window(self)
        Gtk.Application.add_window(self, window)
        window.show()
        
        return window   
    
    def _init_config(self):
        """
        Initialize configuration parser and the         
        """
        self._config_parser = SafeConfigParser()
        conf_file = self.package + ".conf"
        for path in xdg_config_dirs:
            full_path = os.path.join(path, self.package, conf_file)
            if os.path.exists(full_path):
                self._config_parser.read(full_path)
                self.debug("Loading configuration from %s", full_path)
                break
        self._config_file = os.path.join(save_config_path(self._package), conf_file)
        self.debug("Configuration will be saved to %s", self._config_file)
        
    def _init_plugin_manager(self):
        self.debug("Initializing plugin manager")
        
        places = []
        if hasattr(self, '_plugin_dir'):
            places.append(self._plugin_dir)
            
        for path in xdg_data_dirs:
            path = os.path.join(path, self._package, "plugins")
            places.append(path)

        PluginManagerSingleton.setBehaviour([
            ConfigurablePluginManager,
            VersionedPluginManager,
        ])
        manager = PluginManagerSingleton.get()
        manager.application = self
        manager.setConfigParser(self._config_parser, self._save_config)
        manager.setPluginInfoExtension("mykiss-plugin")
        manager.setPluginPlaces(places)
        #manager.setCategoriesFilter({
        #    "Application" : WindowPlugin,
        #})
        manager.collectPlugins()
        
        #for info in manager.getPluginsOfCategory("Window"):
        for info in manager.getAllPlugins():
            plugin = info.plugin_object
            plugin.application = self
    
    def _save_config(self):
        self.debug("Saving configuration")
        f = open(self._config_file, "a")
        self._config_parser.write(f)
        f.close()
        
    def on_activate(self, data=None):
        self.add_window()

    def on_startup(self, data=None):
        self.debug("-"*60)
        self.debug(" %s version %s" % (self._package_name, self._version))
        self.debug("-"*60)
        self.debug("data_dir: %s" % self._data_dir)
        icons.register_stock_icons(os.path.join(self._data_dir, "icons"), 
                                   icons.stock_icons)
        self._init_config()
        self._init_plugin_manager()
        
