# coding=utf8
import os
from gettext import gettext as _
from ConfigParser import SafeConfigParser, NoSectionError
from xdg.BaseDirectory import xdg_data_dirs, save_config_path, xdg_config_dirs
from gi.repository import GObject, Gtk, Gio

from yapsy.ConfigurablePluginManager import ConfigurablePluginManager
from yapsy.VersionedPluginManager import VersionedPluginManager
from yapsy.PluginManager import PluginManagerSingleton

from logobject import LogObject
from mykiss.widgets import Window
import icons

APP_MENU_XML = """
<interface>
  <menu id='app-menu'>
    <section>
      <item>
        <attribute name='label' translatable='yes'>_New Window</attribute>
        <attribute name='action'>app.new</attribute>
      </item>
    </section>
    <section>
      <item>
        <attribute name='label' translatable='yes'>_About Mykiss</attribute>
        <attribute name='action'>app.about</attribute>
      </item>
    </section>
    <section>
      <item>
        <attribute name='label' translatable='yes'>_Quit</attribute>
        <attribute name='action'>app.quit</attribute>
        <attribute name='accel'>&lt;Primary&gt;q</attribute>
      </item>
    </section>
  </menu>
</interface>
"""

class Application(Gtk.Application, LogObject):
    """
    Main application instance derived from `Gtk.Application`.
    
    Args:
        package      -- The `PACKAGE` as defined by configure.ac
        package_name -- The `PACKAGE_NAME` as defined by configure.ac
        version      -- The `VERSION` as defined by configure.ac
        data_dir     -- The data directory, typically defined by `pkgdatadir`
        plugin_dir   -- [optional] An additional directory in which to search 
                        for plugins
    """    
    def __init__(self, **kwargs):
        LogObject.__init__(self)
        Gtk.Application.__init__(self, 
                                 application_id="com.micahcarrick.Mykiss",
                                 flags=Gio.ApplicationFlags.HANDLES_COMMAND_LINE,
                                 register_session=True)

        # autotools keyword arguments passed in by the run script
        for key in kwargs:
            setattr(self, '_' + key, kwargs[key])
        self._documents = None
        
        # connect signal handlers
        self.connect("startup", self.startup)
        self.connect("activate", self.activate)
        self.connect("command-line", self.command_line)
        #self.connect("window-added", self._on_window_added)
        #self.connect("window-removed", self._on_window_removed)
    
    @GObject.property
    def config(self):
        return self._config
        
    @GObject.property
    def data_dir(self):
        return self._data_dir
        
    @GObject.property
    def package(self):
        return self._package
    
    @GObject.property
    def package_name(self):
        return self._package_name
    
    @GObject.property
    def version(self):
        return self._version
    
    @GObject.property
    def documents(self):
        return self._documents
        
    def add_window(self):
        """
        Return a new `mykiss.window.Window()` instance added to the application.
        """
        window = Window(self)
        window.set_icon_name(self.package_name)
        window.show()
        editor = window.get_editor()
        
        return window   
    
    def _find_config_file(self, conf_file):
        """
        Return the full path to a configuration file or None if the file is
        not found in any of the configuration directories.
        
        Args:
            conf_file -- The filename (basename) of a configuration file.
        """
        for path in xdg_config_dirs:
            full_path = os.path.join(path, self.package, conf_file)
            if os.path.exists(full_path):
                return full_path
        return None
                
    def _init_config(self):
        """
        Initialize configuration parser and the filename that the parser will
        write to.        
        """
        # TODO: use GSettings instead
        self._config = SafeConfigParser()
        # read config from the first found config file
        filename = self.package + ".conf"
        config_file = self._find_config_file(filename)
        if config_file:
            self.debug("Loading configuration from %s", config_file)
            self._config.read(config_file)
        # always write config to save_config_path
        self._config_file = os.path.join(save_config_path(self._package), filename)
        
    def _init_plugin_engine(self):
        self.debug("Initializing plugin engine")
        
        places = []
        if hasattr(self, '_plugin_dir'):
            # run_local.py will pass in a plugin directory
            places.append(self._plugin_dir)
            
        for path in xdg_data_dirs:
            path = os.path.join(path, self._package, "plugins")
            places.append(path)

        PluginManagerSingleton.setBehaviour([
            ConfigurablePluginManager,
            VersionedPluginManager,
        ])
        manager = PluginManagerSingleton.get()
        manager.application = self
        manager.setConfigParser(self._config, self.write_config)
        manager.setPluginInfoExtension("plugin")
        manager.setPluginPlaces(places)
        #manager.setCategoriesFilter({
        #    "Application" : WindowPlugin,
        #})
        manager.collectPlugins()
        
        #for info in manager.getPluginsOfCategory("Window"):
        for info in manager.getAllPlugins():
            plugin = info.plugin_object
            plugin.application = self
    
    def _install_app_menu(self):
        """
        Install the "app-menu" 
        """
        action = Gio.SimpleAction(name="new")
        action.connect("activate", lambda *x: self.activate())
        self.add_action(action)
        
        action = Gio.SimpleAction(name="about")
        action.connect("activate", lambda *x: self.show_about_dialog())
        self.add_action(action)
        
        action = Gio.SimpleAction(name="quit")
        action.connect("activate", lambda *x: self.quit())
        self.add_action(action)

        builder = Gtk.Builder()
        builder.add_from_string(APP_MENU_XML)
        self.set_app_menu(builder.get_object("app-menu"))
        
    def activate(self, data=None):
        self.add_window()

    def command_line(self, commands, data=None):
        # TODO
        self.activate()
        return False
        
    def startup(self, data=None):
        self.debug("-"*60)
        self.debug(" %s version %s" % (self._package_name, self._version))
        self.debug("-"*60)
        self.debug("data_dir: %s" % self._data_dir)
        icons.register_stock_icons(os.path.join(self._data_dir, 'icons'), 
                                   icons.stock_icons)
        self._init_config()
        self._install_app_menu()
        self._init_plugin_engine()

    def show_about_dialog(self, parent=None):
        """ Show an 'About' dialog. """
        dialog = Gtk.AboutDialog()
        if parent:
            dialog.set_transient_for(parent)
            dialog.set_modal(True)
        dialog.set_authors(("Micah Carrick <micah@quixotix.com>",))
        dialog.set_copyright("Copyright Â© 2012, Micah Carrick")
        dialog.set_icon_name(self.package)
        dialog.set_logo_icon_name(self.package)
        dialog.set_website("http://mykiss-editor.org")
        dialog.set_website_label("http://mykiss-editor.org")
        dialog.set_program_name(self.package_name)
        dialog.set_version(self.version)
        dialog.set_comments(_("Mykiss is a programmer's text editor and IDE\n(Integrated Development Environment)"))
        dialog.run()
        dialog.destroy()
        
    def _on_window_added(self, application, window, data=None):
        pass

    def _on_window_removed(self, application, window, data=None):
        pass
    
    def write_config(self):
        """
        Write the current configuration to the configuration file.
        """
        self.debug("Saving configuration to %s", self._config_file)
        f = open(self._config_file, "w")
        self._config.write(f)
        f.close()
        
