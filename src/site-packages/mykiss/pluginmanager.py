import os
from gi.repository import Gtk
from gi.repository import GdkPixbuf

class PluginManager(Gtk.Grid):
    """
    A composite widget for enabling, disabling, and configuring plugins.
    
    Args:
        data_dir: The directory in which to find application data.
        engine: A PluginEngine instance.
    """
    def __init__(self, data_dir, engine=None):
        Gtk.Grid.__init__(self)
        self.set_orientation(Gtk.Orientation.VERTICAL)
        self._data_dir = data_dir
        self._treeview = self._init_treeview()

        scrolled = Gtk.ScrolledWindow()
        scrolled.set_shadow_type(Gtk.ShadowType.IN)
        scrolled.add(self._treeview)
        
        self.add(self._init_toolbar())
        self.add(scrolled)        
        self.show_all()
        
        # default plugin icon
        icon_theme = Gtk.IconTheme.get_default()
        self._plugin_pixbuf = icon_theme.load_icon("libpeas-plugin", 32, Gtk.IconLookupFlags.USE_BUILTIN)
        
        self._model.append((1, self._plugin_pixbuf, "<b>Test Plugin</b>\nUsed to test the plugin system.", "0.1.1", self))
        self._model.append((1, self._plugin_pixbuf, "<b>Example Window Plugin</b>\nAn example of a window plugin.", "0.1.0", self))
    
    def _init_toolbar(self):
        """
        Return a Gtk.Toolbar based on the UI definitions in plugin_manager.ui.
        """
        manager = Gtk.UIManager()
        #accelgroup = manager.get_accel_group()
        #self.add_accel_group(accelgroup)
        
        actions = Gtk.ActionGroup("PluginActions")
        actions.add_actions([
            ('About', Gtk.STOCK_ABOUT, "About", None, None, 
                self.on_about_activate),
            ('Preferences', Gtk.STOCK_PREFERENCES, "Preferences", None, None, 
                self.on_preferences_activate),
        ])
        manager.insert_action_group(actions)
        
        ui_file = os.path.join(self._data_dir, "ui", "plugin_manager.ui")
        manager.add_ui_from_file(ui_file)
        toolbar = manager.get_widget("ui/PluginManagerToolbar")
        context = toolbar.get_style_context()
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)
        
        return toolbar 
        
    def _init_treeview(self):
        """
        Return a Gtk.Treeview representing the list of installed plugins.
        """
        treeview = Gtk.TreeView()
        treeview.set_headers_visible(False)
        self._model = Gtk.ListStore(int, GdkPixbuf.Pixbuf, str, str, object)
        treeview.set_model(self._model)
        treeview.set_vexpand(True)
        treeview.set_hexpand(True)
        treeview.set_valign(Gtk.Align.FILL)
        treeview.set_halign(Gtk.Align.FILL)
        column = Gtk.TreeViewColumn("Plugin")
        # toggle button
        cell = Gtk.CellRendererToggle()
        cell.set_activatable(True)
        cell.connect("toggled", self.on_plugin_toggled, (self._model, 0))
        column.pack_start(cell, False)
        column.add_attribute(cell, "active", 0)
        
        # icon
        cell = Gtk.CellRendererPixbuf()
        column.pack_start(cell, False)
        column.add_attribute(cell, 'pixbuf', 1)
        
        # plugin name
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, "markup", 2)
        treeview.append_column(column)
        
        return treeview
        
    def on_plugin_toggled(self, renderer, path, data=None):
        """ 
        A checkbox for enabling/disabling a plugin was toggled. 
        """
        model, column = data
        model[path][column] = not model[path][column]
    
    def on_about_activate(self, action, data=None):
        pass
    
    def on_preferences_activate(self, action, data=None):
        pass
        
