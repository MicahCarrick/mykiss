import logging
import os

from gi.repository import Gtk
from gi.repository import GdkPixbuf

# stock icon constants
STOCK_PLUGIN = "mykiss-plugin"
stock_icons = (
    STOCK_PLUGIN,
)

logger = logging.getLogger("icons")

def register_stock_icons(icon_dir, icon_names, prefix=""):
    """
    Register stock icons. The directory containing the icons should provide a
    scalable SVG icon for the default source as well as sizes for any possible
    Gtk.IconSize (16, 18, 24, 20, 32, 48). At bare minimum, an SVG and a 48x48
    pixel icon should be provided.
    
    Icon directory structure:
    
        <icon_dir>/scalable/<icon_name>.svg
        <icon_dir>/16x16/<icon_name>.png
        ... etc.
    
    Args:
        icon_dir: The directory containing icon source images.
        icon_names: A list of icon names which correspond both to the stock ID
            as well as the filename without the extension. 
        prefix: A prefix to add to the stock_id.
    """
    factory = Gtk.IconFactory()
    for name in icon_names:
        svg_file = os.path.join(icon_dir, "scalable", name + ".svg")
        try:
            pixbuf = GdkPixbuf.Pixbuf.new_from_file(svg_file)
            icon_set = Gtk.IconSet.new_from_pixbuf(pixbuf)
            logger.debug("Registered stock icon (scalable) from %s" % svg_file)
        except Exception, e:
            pass

        for icon_size in xrange(1, 7):
            settings = Gtk.Settings.get_default()
            found, width, height = Gtk.icon_size_lookup_for_settings(settings, 
                                                                     icon_size)
            if found:
                folder = "%sx%s" % (str(width), str(height))
                icon_file = os.path.join(icon_dir, folder, name + ".png")
                
                if os.path.exists(icon_file):
                    source = Gtk.IconSource()
                    source.set_filename(icon_file)
                    source.set_size_wildcarded(False)
                    source.set_size(icon_size)
                    icon_set.add_source(source)
                    logger.debug("Registered stock icon (%s) from %s" % (icon_size, icon_file))
        factory.add(prefix+name, icon_set)
    factory.add_default()

