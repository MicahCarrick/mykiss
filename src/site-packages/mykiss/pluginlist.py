from gi.repository import Gtk, GObject, GdkPixbuf
from yapsy.PluginManager import PluginManagerSingleton

class PluginList(Gtk.TreeView):
    __gtype_name__ = "MykissPluginList"
    """
    A treeview for activating and deactivating installed plugins.    
    """
    def __init__(self):
        
        self._store = Gtk.ListStore(GObject.TYPE_BOOLEAN,   # activated
                                    GdkPixbuf.Pixbuf,       # icon
                                    GObject.TYPE_STRING,    # name (markup)
                                    GObject.TYPE_STRING,    # version
                                    GObject.TYPE_STRING,    # description 
                                    object,                 # plugin info               
                                    object)                 # plugin object
        Gtk.TreeView.__init__(self, self._store)
        self.set_headers_visible(True)          
        
        #column = Gtk.TreeViewColumn(" ")
        
        #self.append_column(column)
        
        column = Gtk.TreeViewColumn("Plugin")
        cell = Gtk.CellRendererToggle()
        cell.connect("toggled", self._on_active_toggled)
        column.pack_start(cell, True)
        column.add_attribute(cell, 'active', 0)
        cell = Gtk.CellRendererPixbuf()
        column.pack_start(cell, False)
        column.add_attribute(cell, 'pixbuf', 1)
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, 'markup', 2)
        self.append_column(column)
        
        column = Gtk.TreeViewColumn("Version")
        cell = Gtk.CellRendererText()
        column.pack_start(cell, True)
        column.add_attribute(cell, 'text', 3)
        self.append_column(column)
        
        self.refresh()
    
    def _on_active_toggled(self, cell, path, data=None):
        # toggle
        iter = self._store.get_iter(path)
        self._store[iter][0] = not self._store[iter][0]
        
        manager = PluginManagerSingleton.get()
        if self._store[iter][0]:
            manager.activatePluginByName(self._store[iter][5].name)
        else:
            manager.deactivatePluginByName(self._store[iter][5].name)
            
    def refresh(self):
        """
        Populate the tree view with all available plugins.
        """
        self._store.clear()
        manager = PluginManagerSingleton.get()
        for info in manager.getAllPlugins():
            plugin = info.plugin_object
            pixbuf = self.render_icon_pixbuf(plugin.icon_name, Gtk.IconSize.MENU)
            self._store.append((plugin.is_activated, pixbuf, info.name, 
                                str(info.version), info.description, info, 
                                plugin))
