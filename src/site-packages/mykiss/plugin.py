from yapsy.IPlugin import IPlugin
from yapsy.PluginManager import PluginManagerSingleton

from mykiss import icons
from mykiss.logobject import LogObject

class MykissPlugin(IPlugin, LogObject):
    application = None
    icon_name = icons.STOCK_PLUGIN
    _handlers = []
    def __init__(self):
        LogObject.__init__(self)
        super(MykissPlugin, self).__init__()
        
        # grab the application instance from the plugin manager
        manager = PluginManagerSingleton.get()
        self.application = manager.application
    
    def activate(self):
        """ Activate the plugin. Deactivation occurs in yapsy.IPlugin. """
        super(MykissPlugin, self).activate()        
    
    def connect(self, obj, signal, callback, data=None):
        """
        Convenience method to connect a signal handler to `obj` so that it can
        automatically be disconnected when the plugin is deactivated.
        """
        handler = obj.connect(signal, callback, data)
        self._handlers.append((obj, handler))
        self.debug("Connected handler %d", handler)
        
    def deactivate(self):
        """ Deactivate the plugin. Deactivation occurs in yapsy.IPlugin. """
        super(MykissPlugin, self).deactivate()
        self.disconnect_handlers()
    
    def disconnect_handlers(self):
        """
        Disconnect the any signal handlers that were connected using the 
        `connect()` method.
        """
        while self._handlers:
            obj, handler = self._handlers.pop()
            obj.disconnect(handler)
            self.debug("Disconnected handler %d", handler)
                
