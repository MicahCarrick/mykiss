from gi.repository import Gtk, GObject

class Statusbar(Gtk.Statusbar):
    def __init__(self):
        Gtk.Statusbar.__init__(self)  
        self._status_context = self.get_context_id("status")
        self._launguage_name = ""
        self._mime_type = ""
        
        self._cursor = Gtk.Label()
        self._cursor.set_padding(8, 0)
        self._cursor.set_alignment(0.0, 0.5)
        self._cursor.set_size_request(130, -1)
        self.pack_end(self._cursor, False, False, 0)
            
        self._encoding = Gtk.Label()
        self._encoding.set_padding(8, 0)
        self.pack_end(self._encoding, False, False, 0)
        
        self._lang = Gtk.Label()
        self._lang.set_padding(8, 0)
        self.pack_end(self._lang, False, False, 0)
        
        self.reset()
        self.show_all()
    
    def reset(self):
        self.set_language_name("")
        self.set_mime_type("")
        self.set_status("")
        self.set_encoding("")
        self.set_cursor_position(1,1)
        
    def set_language_name(self, language_name):
        self._language_name = language_name
        self._update_lang()
   
    def set_mime_type(self, mime_type):
        self._mime_type = mime_type
        self._update_lang()
            
    def set_cursor_position(self, line, column):
        self._cursor.set_text("Ln %s, Col %s" % (line, column))
    
    def set_encoding(self, encoding):
        self._encoding.set_text(encoding)
        
    def set_status(self, status):
        self.pop(self._status_context)
        self.push(self._status_context, status)
    
    def _update_lang(self):
        if self._mime_type:
            self._lang.set_text("%s (%s)" % (self._language_name, self._mime_type))
        else:
            self._lang.set_text(self._language_name)

