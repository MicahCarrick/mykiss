# coding=utf8

import os
from gettext import gettext as _
import ConfigParser
from xdg.BaseDirectory import save_config_path

from gi.repository import GObject
from gi.repository import Gtk
from gi.repository import Gdl

from mykiss.logobject import LogObject
from mykiss.widgets import PluginManager
from mykiss.widgets import Editor
from mykiss import icons

class Window(Gtk.Window, LogObject):
    """
    Main application window derived from `Gtk.Window`.
    
    Args:
        application -- The `mykiss.Application` instance creating the `Window`
    """    
    def __init__(self, application):
        LogObject.__init__(self)
        Gtk.Window.__init__(self)

        self._application = application
        self._ui_manager = self._init_ui_manager()
        self._widgets = {}
        self._editor = None
        self._documents = []
        
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL) # main layout box
        
        # menu and toolbar
        menu, toolbar = self._init_menu_and_toolbar(self._ui_manager)
        box.pack_start(menu, False, False, 0)
        self._toolbar_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        box.pack_start(toolbar, False, False, 0)
        
        #dock
        dockbox = self._init_dock()
        box.pack_start(dockbox, True, True, 0)        
        
        # statusbar
        box.pack_end(Gtk.Statusbar(), False, False, 0)
        box.show_all()
        self.add(box)
        
        # plugin manager
        self._init_editor()
        self._init_plugin_manager()

        self.connect("show", self._on_show)
        self.connect("delete-event", self._on_delete_event)

    @GObject.property
    def application(self):
        return self._application
    
    @GObject.property
    def editor(self):
        return self._editor
    
    def get_editor(self):
        return self._editor
    
    @GObject.property
    def widgets(self):
        return self._widgets
    
    def get_widgets(self):
        return self._widgets
    
    @GObject.property
    def documents(self):
        return self._documents
    
    def get_documents(self):
        return self._documents
        
    @GObject.property
    def ui_manager(self):
        return self._ui_manager
    
    def get_ui_manager(self):
        return self._ui_manager
    """
    @GObject.property
    def doc_layout(self):
        return self._doc_layout
    """
    
    def add_widget(self, name, label, widget, icon_name=icons.STOCK_PLUGIN, 
                   orientation=Gtk.Orientation.VERTICAL):
        """
        Add a new widget to the window. The initial placement can be suggested
        with the `orientation` argument, however, the user ultimately has 
        control over the dock layout which is loaded and saved at each session. 
        
        Args:
            name        -- A unique name used to reference the widget.
            label       -- The label used in the dock window and menu.
            widget      -- The widget to display in the dock item.
            icon_name   -- A registered stock icon for the dock item.
            orientation -- A `Gtk.Orientation` constant.
        """
        if name in self._widgets:
            raise ValueError("Duplicate widget name: '%s'" % name)
            
        # create the dock item
        item = Gdl.DockItem.new_with_stock(name, " "+label,
                                           icon_name,
                                           Gdl.DockItemBehavior.NORMAL)
                                           #Gdl.DockItemBehavior.CANT_ICONIFY)
                                           #https://bugzilla.gnome.org/show_bug.cgi?id=452518
        item.add(widget)    
        if orientation == Gtk.Orientation.HORIZONTAL:                            
            placement = Gdl.DockPlacement.BOTTOM
        else:
            placement = Gdl.DockPlacement.LEFT
        
        
        # add the item to the View menu
        view_menu = self._ui_manager.get_widget("ui/MainMenu/View").get_submenu()
        menu_item = Gtk.ImageMenuItem(label=label)
        image = Gtk.Image.new_from_stock(icon_name, Gtk.IconSize.MENU)
        menu_item.set_image(image)
        menu_item.set_always_show_image(True)
        menu_item.show_all()
        view_menu.append(menu_item)
        menu_item.connect("activate", self._on_view_dock_item_activate, item)
        
        # store the widget for use in remove_widget()
        self._widgets[name] = (widget, item, menu_item)
        
        # add the dock item
        self._dock.add_item(item, placement)
    
    def remove_widget(self, name):
        """
        Remove a widget 
        """
        widget, dock_item, menu_item = self._widgets[name]
        self._widgets.pop(name)
        dock_item.unbind()
        widget.destroy()
        menu_item.destroy()
        
    def _on_view_dock_item_activate(self, menu_item, dock_item):
        """ Show the dock item if it's hidden or doesn't have a parent. """
        if not dock_item.get_visible() or not dock_item.get_parent():
            dock_item.show_item()        
    
    def _init_dock(self):
        """ Initialize the dock. """
        # dock
        dock = Gdl.Dock()
        dockbar = Gdl.DockBar.new(dock)
        # bug 667158 https://bugzilla.gnome.org/show_bug.cgi?id=667158
        dockbar.set_homogeneous(False)
        dockbar.set_style(Gdl.DockBarStyle.ICONS)
        # TODO make placement of the dockbar (left, top, right, bottom) and 
        # the icon style configurable
        dockbox = Gtk.HBox(False, 0)
        dockbox.pack_start(dockbar, False, False, 0)
        dockbox.pack_start(dock, True, True, 0)
        
        self._dock = dock
        self._dock_layout = Gdl.DockLayout.new(dock)
        self._dock.connect("layout-changed", self._on_dock_layout_changed)
        self._dock_layout_file = os.path.join(
            save_config_path(self.application.package), "dock_layout.xml")
            
        return dockbox
    
    def _init_editor(self):
        # main editor area
        dockitem = Gdl.DockItem.new_with_stock("editor", "Editor", 
                                               Gtk.STOCK_EDIT, 
                                               Gdl.DockItemBehavior.NO_GRIP |
                                               Gdl.DockItemBehavior.LOCKED |
                                               Gdl.DockItemBehavior.CANT_CLOSE |
                                               Gdl.DockItemBehavior.CANT_ICONIFY)
        self._editor = Editor()
        self._editor.connect("active-document-changed", 
                             self._on_editor_active_document_changed)
        self._editor.connect("document-added", 
                             self._on_editor_document_added)
        self._editor.connect("document-removed", 
                             self._on_editor_document_removed)
        self._editor.connect("close-tab-clicked", 
                             self._on_editor_close_tab_clicked)
        self._editor.new_tab() # will set window title too
        self._editor.show()
        dockitem.add(self._editor)
        dockitem.show()
        self._dock.add_item(dockitem, Gdl.DockPlacement.CENTER)
        
    def _init_menu_and_toolbar(self, manager):
        """ 
        Return a 2-tuple containing a Gtk.Menu and a Gtk.Toolbar representing
        the window's main menu and primary toolbar as defined in external
        UI definitions (menu_and_toolbar.ui).
        
        Args:
            manager -- The window's Gtk.UIManager instance.
        """
        actions = Gtk.ActionGroup("AppActions")
        actions.add_actions([
            ('File', None, '_File', None, None, None),
            ('Edit', None, '_Edit', None, None, None),
            ('View', None, '_View', None, None, None),
            ('Split', None, '_Split', None, None, None),
            ('Dock', None, '_Dock', None, None, None),
            ('Help', None, '_Help', None, None, None),
            ('New', Gtk.STOCK_NEW, None, None, None, 
                self._on_file_new_activate),
            ('Open', Gtk.STOCK_OPEN, _("Open..."), None, None, 
                self._on_file_open_activate),
            ('Quit', Gtk.STOCK_QUIT, None, None, None, 
                self._on_file_quit_activate),
            ('About', Gtk.STOCK_ABOUT, _("About..."), None, None, 
                self._on_help_about_activate),
        ])
        actions.add_toggle_actions([
            ('LockDockLayout', None, _("_Lock Dock Layout"), None, None, 
                self._on_view_lock_dock_layout_toggled),
            ('SplitEditorHorizontal', None, _("Split Editor Horizontally"),
                None, None, 
                self._on_view_split_editor_horizontal_toggled, False),
            ('SplitEditorVertical', None, _("Split Editor Vertically"),
                None, None, 
                self._on_view_split_editor_vertical_toggled, False),
            ('SplitViewHorizontal', None, _("Split View Horizontally"),
                None, None, 
                self._on_view_split_view_horizontal_toggled, False),
            ('SplitViewVertical', None, _("Split View Vertically"),
                None, None, 
                self._on_view_split_view_vertical_toggled, False),
        ])
        manager.insert_action_group(actions)
        
        # available to the current document only
        self._document_actions = Gtk.ActionGroup("FileActions")
        self._document_actions.add_actions([
            ('Save', Gtk.STOCK_SAVE, None, None, None, 
                self._on_file_new_activate),
            ('SaveAs', Gtk.STOCK_SAVE_AS, _("Save As..."), None, None, 
                self._on_file_open_activate),
            ('Close', Gtk.STOCK_CLOSE, None, None, None, 
                self._on_file_close_activate),
            ('Cut', Gtk.STOCK_CUT, None, None, None, 
                self._on_edit_cut_activate),
            ('Copy', Gtk.STOCK_COPY, None, None, None, 
                self._on_edit_copy_activate),
            ('Paste', Gtk.STOCK_PASTE, None, None, None, 
                self._on_edit_paste_activate),
        ])
        self._document_actions.set_sensitive(False)
        manager.insert_action_group(self._document_actions)
        
        ui_file = os.path.join(self.application.data_dir, "ui", 
                               "menu_and_toolbar.ui")
        self.debug("Loading UI definitions from %s" % ui_file)
        manager.add_ui_from_file(ui_file)
        menu = manager.get_widget("ui/MainMenu")
        toolbar = manager.get_widget("ui/MainToolbar")

        # add separator to view menu
        view_menu = self._ui_manager.get_widget("ui/MainMenu/View").get_submenu()
        view_menu.append(Gtk.SeparatorMenuItem.new())
        
        # set primary toolbar context
        context = toolbar.get_style_context()
        context.add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)
        return (menu, toolbar)     
    
    def _init_plugin_manager(self):
        """ Initialize the plugin manager dock item. """
        widget = PluginManager(self)
        self.add_widget("mykiss-plugin-manager", "Plugin Manager", widget, 
                        icons.STOCK_PLUGIN, Gtk.Orientation.VERTICAL)
    
    def _init_ui_manager(self):
        """ Initialize the GtkUIManager for this window. """
        manager = Gtk.UIManager()
        accelgroup = manager.get_accel_group()
        self.add_accel_group(accelgroup)
        
        return manager
     
    def _on_file_new_activate(self, action, data=None):
        self._editor.new_tab(None, True)
    
    def _on_file_open_activate(self, action, data=None):
        pass
        
    def _on_file_save_activate(self, action, data=None):
        pass
    
    def _on_file_save_as_activate(self, action, data=None):
        pass
    
    def _on_file_close_activate(self, action, data=None):
        self._editor.close_active_tab()
        
    def _on_file_quit_activate(self, action, data=None):
        self.destroy()

    def _on_edit_cut_activate(self, action, data=None):
        pass
    
    def _on_edit_copy_activate(self, action, data=None):
        pass
    
    def _on_edit_paste_activate(self, action, data=None):
        pass
    
    def _on_view_split_editor_horizontal_toggled(self, action, data=None):
        """ Split the editor and deactivate action for other orientation. """
        other = self._ui_manager.get_action("ui/MainMenu/View/Split/SplitEditorVertical")
        if action.get_active():
            self._editor.split_editor(Gtk.Orientation.HORIZONTAL)
            # make sure other split action is inactive
            other.set_active(False)
        else:
            # only unsplit if both orientations are not active
            if not other.get_active():
                self._editor.unsplit_editor()
        
    def _on_view_split_editor_vertical_toggled(self, action, data=None):
        """ Split the editor and deactivate action for other orientation. """
        other = self._ui_manager.get_action("ui/MainMenu/View/Split/SplitEditorHorizontal")
        if action.get_active():
            self._editor.split_editor(Gtk.Orientation.VERTICAL)
            # make sure other split action is inactive
            other.set_active(False)
        else:
            # only unsplit if both orientations are not active
            if not other.get_active():
                self._editor.unsplit_editor()

    def _on_view_split_view_horizontal_toggled(self, action, data=None):
        """ Split the editor and deactivate action for other orientation. """
        other = self._ui_manager.get_action("ui/MainMenu/View/Split/SplitViewVertical")
        if action.get_active():
            self._editor.split_view(Gtk.Orientation.HORIZONTAL)
            # make sure other split action is inactive
            other.set_active(False)
        else:
            # only unsplit if both orientations are not active
            if not other.get_active():
                self._editor.unsplit_view()
        
    def _on_view_split_view_vertical_toggled(self, action, data=None):
        """ Split the editor and deactivate action for other orientation. """
        other = self._ui_manager.get_action("ui/MainMenu/View/Split/SplitViewHorizontal")
        if action.get_active():
            self._editor.split_view(Gtk.Orientation.VERTICAL)
            # make sure other split action is inactive
            other.set_active(False)
        else:
            # only unsplit if both orientations are not active
            if not other.get_active():
                self._editor.unsplit_view()
                
    def _on_view_lock_dock_layout_toggled(self, action, data=None):
        self._dock.master.set_property("locked", action.get_active())
    
    def _on_dock_layout_changed(self, dock, data=None):
        pass
        
    def _on_editor_active_document_changed(self, editor, document, data=None):
        # update the titlebar
        self.set_title("%s - %s" % (document.name, self.application.package_name))
        
    def _on_editor_close_tab_clicked(self, editor, document, data=None):
        # TODO: check if document needs to be saved.
        editor.close_tab(document)
    
    def _on_editor_document_added(self, editor, document, data=None):
        """ A document was added to the editor. """
        if not self._documents: 
            # update actions if first document
            self._document_actions.set_sensitive(True)
        self._documents.append(document)
    
    def _on_editor_document_removed(self, editor, document, data=None):
        """ A document was removed from the editor. """
        self._documents.remove(document)
        if not self._documents: 
            # update actions if last document
            self._document_actions.set_sensitive(False)
            self.set_title("%s" % self.application.package_name)
        
    def _on_help_about_activate(self, action, data=None):
        """ Show an 'About' dialog. """
        dialog = Gtk.AboutDialog()
        dialog.set_transient_for(self)
        dialog.set_modal(True)
        
        dialog.set_authors(("Micah Carrick <micah@quixotix.com>",))
        dialog.set_copyright("Copyright © 2012, Micah Carrick")
        dialog.set_icon_name(self.application.package)
        dialog.set_logo_icon_name(self.application.package)
        dialog.set_website("http://mykiss-editor.org")
        dialog.set_website_label("http://mykiss-editor.org")
        dialog.set_program_name(self.application.package_name)
        dialog.set_version(self.application.version)
        dialog.set_comments(_("Mykiss is a programmer's text editor and IDE\n(Integrated Development Environment)"))
        dialog.run()
        dialog.destroy()

    def _on_delete_event(self, window, data=None):
        """ Window is being removed. """
        self._save_geometry()
        self.save_dock_layout(self._dock_layout_file)
        
    def _on_show(self, window, data=None):  
        """ Window is being shown. """
        config = self.application.config
        
        # restore window geometry  
        try:
            if config.getboolean('Window', 'restore_geometry'):
                # let widgets added by plugins catch up
                while Gtk.events_pending(): 
                    Gtk.main_iteration()  
                self._restore_geometry()
        except ConfigParser.NoSectionError, err:
            config.add_section('Window')
        except ConfigParser.NoOptionError, err:
            self.warning(err)
        
        # allow window to get resized
        while Gtk.events_pending(): 
            Gtk.main_iteration_do(True) 
        self.load_dock_layout(self._dock_layout_file)
    
    def load_dock_layout(self, filename, layout="default"):
        """
        Load a dock layout from a and XML file.
        
        Args:
            filename -- The XML file containing the dock layout.
            layout   -- The layout name as stored in the XML file.
        """
        if self._dock_layout.load_from_file(filename):
            self.debug("Loaded dock layout from %s", filename)
            self._dock_layout.load_layout(layout)
        else:
            self.warning("Failed to load dock layout from %s", filename)
        
        # sync view menu
        locked = bool(self._dock.master.get_property("locked"))
        action = self._ui_manager.get_action("ui/MainMenu/View/LockDockLayout")
        action.set_active(locked)
            
    def save_dock_layout(self, filename, layout="default"):
        """
        Save the dock layout to an XML file.
        
        Args:
            filename -- The XML file containing the dock layout.
            layout   -- The layout name as stored in the XML file.
        """
        self._dock_layout.save_layout(layout)
        self._dock_layout.save_to_file(filename)
        self.debug("Saved dock layout to %s", filename)
    
    def _restore_geometry(self):
        """ Restore the window geometry from the configuration file. """
        config = self.application.config
        try:
            width = config.getint('Window', 'width')
            height = config.getint('Window', 'height')
            x = config.getint('Window', 'x')
            y = config.getint('Window', 'y')
            self.debug("Restoring geometry: (%d,%d) %dx%d", x, y, width, height)
            self.resize(width, height) 
            self.move(x, y)
        except ConfigParser.NoSectionError, err:
            config.add_section('Window')
        except ConfigParser.NoOptionError, err:
            self.warning(err)
 
    def _save_geometry(self):
        """ Save the window geometery to the configuration file. """
        if self.get_window().get_state() != 0:
            return # ignore if fullscreen, maximized, etc.
        size = self.get_size()
        position = self.get_position()
        self.debug("Saving geometry: (%d,%d) %dx%d", position[0], position[1], size[0], size[1])
        config = self.application.config
        config.set('Window', 'width', str(size[0]))
        config.set('Window', 'height', str(size[1]))
        config.set('Window', 'x', str(position[0]))
        config.set('Window', 'y', str(position[1]))
        self.application.write_config()
        
