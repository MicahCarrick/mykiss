from gi.repository import GObject, Gtk
from mykiss.widgets import View

class Editor(Gtk.Paned):
    def __init__(self):
        Gtk.Paned.__init__(self)
        self._views = []
        self._untitled_counter = 0
        
        # primary notebook
        self._notebook1 = self._create_notebook()
        self.add1(self._notebook1)
        
        # secondary notebook
        self._notebook2 = self._create_notebook()
        self._notebook2.hide()
        self.add2(self._notebook2)
        
    @GObject.property
    def views(self):
        return self._views
        
    def get_views(self):
        return self._views
    
    def get_active_view(self):
        raise NotImplementedError
    
    def set_active_view(self):
        raise NotImplementedError
    
    def new_view(self, document=None):
        view = View()
        view.show()
        self._views.append(view)
        self._add_view_to_notebook(self._notebook1, view)
        
    def close_view(self):
        raise NotImplementedError
    
    def split(self, orientation=Gtk.Orientation.VERTICAL):
        # switch orientation since a user expects a "vertical" split to show
        # panes in the "horizontal" orientation
        if orientation == Gtk.Orientation.VERTICAL:
            self.set_orientation(Gtk.Orientation.HORIZONTAL)
        else:
            self.set_orientation(Gtk.Orientation.VERTICAL)
        self._notebook2.show()
    
    def unsplit(self):
        # TODO: move all pages to notebook1
        self._notebook2.hide()
        
    def _add_view_to_notebook(self, notebook, view):
        self._untitled_counter += 1
        label = Gtk.Label("Untitled %d" % self._untitled_counter)
        sw = Gtk.ScrolledWindow()
        sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        sw.add(view)
        sw.show()
        notebook.append_page(sw, label)
        
    def _create_notebook(self):
        notebook = Gtk.Notebook()
        notebook.show()
        return notebook

