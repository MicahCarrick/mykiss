from gi.repository import GObject, Gtk, Pango
from gi.repository import Pango
from mykiss import LogObject
from mykiss import Document
from mykiss.widgets import EditorTab

class Editor(Gtk.Paned, LogObject):
    __gsignals__ = {
        "active-document-changed": (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE,
                                   (GObject.TYPE_PYOBJECT,)),
        "document-added":          (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE,
                                   (GObject.TYPE_PYOBJECT,)),
        "document-removed":        (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE,
                                   (GObject.TYPE_PYOBJECT,)),
        "close-tab-clicked":       (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE,
                                   (GObject.TYPE_PYOBJECT,)),
    }
    def __init__(self):
        LogObject.__init__(self)
        Gtk.Paned.__init__(self)
        self._tabs = []
        self._split_view = False
        self._active_document = None
        
        # user configuration
        self._font = "Monospace 10"
        self._view_props = {
            "auto-indent": False,
            "draw-spaces": 0,
            "highlight-current-line": False,
            "indent-on-tab": True,
            "insert-spaces-instead-of-tabs": True,
            "show-right-margin": True,
            "right-margin-position": 80,
            "show-line-numbers": True,
            "tab-width": 4,
            "smart-home-end": 0
        }
        self._buffer_props = {
            "highlight-syntax": True,
        }
        self._show_line_numbers = True
        self._show_right_margin = True
        self._right_margin_position = 80
        self._tab_width = 4
        self._insert_spaces_instead_of_tabs = True
        self._highlight_current_line = True
        
        # primary notebook
        self._notebook1 = self._create_notebook()
        self.add1(self._notebook1)
        
        # secondary notebook
        self._notebook2 = self._create_notebook()
        self._notebook2.hide()
        self.add2(self._notebook2)
        
    def close_tab(self, document):
        """
        Close the specified document and remove it's notebook tab.
        
        Args:
            document - The `mykiss.Document` instance to close.
        """
        notebook, page, tab = self._find_document(document)
        self._tabs.remove(tab)
        notebook.remove_page(page)
        
        self.debug('"document-removed" %s %s', document.name, document)
        self.emit("document-removed", document)
    
    def close_active_tab(self):
        """
        Close the currently active document and remove it's notebook tab.
        """
        self.close_tab(self._active_document)
        
    def new_tab(self, document=None, set_active=False):
        """
        Create a new EditorTab and add it to the editor.
        """
        tab = EditorTab(document)

        if self._split_view is not False:    # split the view
            tab.split(self._split_view)
        
        self._apply_settings_to_buffers([tab.get_buffer(),])
        self._apply_settings_to_views(tab.get_views())
        
        if document:
            document.read(tab.get_buffer())
            
        # active document is set when a view is focused or page changed
        tab.connect("view-focused", self._on_view_focused)
        if not self._active_document:
            tab.grab_focus()
        
        tab.connect("close-clicked", self._on_tab_close_clicked)
        
        self._add_tab(self._notebook1, tab)
        self.debug('"document-added" %s %s', tab.document.name, tab.document)
        self.emit("document-added", tab.document)
        
        if set_active:
            self.set_active_document(tab.document)
 
    def set_active_document(self, document):
        """
        Set the active document being edited and make sure it's notebook page
        is currently active.
        
        Args:
            document -- A `mykiss.Document` instance.
        """
        self._active_document = document
        # make sure it's notebook page is visible
        # TODO yuck! refactor this
        page = self._notebook1.get_nth_page(self._notebook1.get_current_page())
        if page and page.editor_tab.document != document:
            pagenum = 0
            for child in self._notebook1.get_children():
                if child.editor_tab.document == document:
                    self._notebook1.set_current_page(pagenum)
                pagenum += 1
                    
        page = self._notebook2.get_nth_page(self._notebook2.get_current_page())
        if page and page.editor_tab.document != document:
            pagenum = 0
            for child in self._notebook2.get_children():
                if child.editor_tab.document == document:
                    self._notebook2.set_current_page(pagenum)
            pagenum += 1
        
        self.debug('"active-document-changed" %s %s', document.name, document)
        self.emit("active-document-changed", document)
    
    def get_active_document(self, document):
        """
        Return the active `mykiss.Document`.        
        """
        return self._active_document
        
    def split_editor(self, orientation=Gtk.Orientation.VERTICAL):
        """
        Split the Editor into 2 separate notebooks where the pages can be
        dragged from one pane to the other. 
        
        Args:
            orientation -- A Gtk.Orientation constant
        """
        # switch orientation since a user expects a "vertical" split to show
        # panes in the "horizontal" orientation
        if orientation == Gtk.Orientation.VERTICAL:
            self.set_orientation(Gtk.Orientation.HORIZONTAL)
        else:
            self.set_orientation(Gtk.Orientation.VERTICAL)
        self._notebook2.show()
    
    def split_view(self, orientation=Gtk.Orientation.VERTICAL):
        """
        Splits the view of the active document. See `EditorTab.split()`
        """
        self._split_view = orientation
        for tab in self._tabs:
            tab.split(orientation)
            self._apply_settings_to_views(tab.get_views())
        
    def unsplit_editor(self):
        """
        Restore the Editor to a single pane merging all the notebook pages.
        """
        # TODO: move all pages to notebook1
        self._notebook2.hide()
        #for child in self._notebook2.get_children():
        #    self._notebook2.remove_child(child)
        #    self._add_view_to_notebook(self._notebook1, child
    
    def unsplit_view(self):
        """
        Restores a single view of the active document. See `EditorTab.unsplit()`
        """
        self._split_view = False
        for tab in self._tabs:
            tab.unsplit()
    
    def _apply_settings_to_views(self, views):
        font_name = "monospace 10"
        font_desc = Pango.FontDescription(font_name)
        for view in views:
            for prop, value in self._view_props.iteritems():
                view.set_property(prop, value)
            view.modify_font(font_desc)
    
    def _apply_settings_to_buffers(self, buffers):
        for buffer in buffers:
            for prop, value in self._buffer_props.iteritems():
                buffer.set_property(prop, value)
        
    def _add_tab(self, notebook, tab):
        """ Add the tab to the editor notebook. """
        self._tabs.append(tab)
        notebook.append_page(tab.page_widget, tab.tab_widget)
        notebook.set_tab_reorderable(tab.page_widget, True)
        notebook.set_tab_detachable(tab.page_widget, True)
        
    def _create_notebook(self):
        """ Return an Editor Gtk.Notebook . """
        notebook = Gtk.Notebook()
        
        # use small padding on tabs
        context = notebook.get_style_context()
        provider = Gtk.CssProvider()
        provider.load_from_data(".notebook tab { padding-left: 1; padding-right: 1; }")
        context.add_provider(provider, 600) # GTK_STYLE_PROVIDER_PRIORITY_APPLICATION

        notebook.show()
        notebook.set_group_name("Editor")
        notebook.set_scrollable(True)
        notebook.connect("switch-page", self._on_notebook_switch_page)
        return notebook
    
    def _find_document(self, document):
        """ 
        Return a 3-tuple containing the `Gtk.Notebook`, page number, and 
        `mykiss.Widgets.EditorTab` instance containing the document or raise
        a KeyError if the document is not found.
        """
        for notebook in [self._notebook1, self._notebook2]:
            for page in xrange(0, notebook.get_n_pages()):
                child = notebook.get_nth_page(page)
                if child.editor_tab.document == document:
                    return (notebook, page, child.editor_tab)
        raise KeyError("Document '%s' was not found.", document.name)      
        
    def _on_notebook_switch_page(self, notebook, page, page_num):
        document = page.editor_tab.document
        if document != self._active_document:
            self.set_active_document(document)
    
    def _on_tab_close_clicked(self, editor_tab, document, data=None):
        self.debug('"close-tab-clicked" %s %s', document.name, document)
        self.emit("close-tab-clicked", document)
    
    def _on_view_focused(self, editor_tab, view, document, data=None):
        if document != self._active_document:
            self.set_active_document(document)

        
