from gi.repository import GObject, Gtk
from mykiss import Document

class TabLabel(Gtk.Box):
    __gsignals__ = {
        "close-clicked": (GObject.SIGNAL_RUN_FIRST, GObject.TYPE_NONE, 
                         (GObject.TYPE_PYOBJECT,)),
    }
    def __init__(self, label_text):
        Gtk.Box.__init__(self)
        self.set_orientation(Gtk.Orientation.HORIZONTAL)
        self.set_spacing(5)
        
        # icon
        self._icon = Gtk.Image()
        self.set_icon_from_stock(Gtk.STOCK_FILE)
        self._icon.show()
        self.pack_start(self._icon, False, False, 0)
        
        # label
        self._label = Gtk.Label(label_text)
        self._label.show()
        self.pack_start(self._label, True, True, 0)
        
        # close button
        self._button = Gtk.Button()
        self._button.set_relief(Gtk.ReliefStyle.NONE)
        self._button.set_focus_on_click(False)
        self._button.set_name("tab-close-button")
        self._button.set_tooltip_text("Close Document")
        image = Gtk.Image.new_from_stock(Gtk.STOCK_CLOSE, Gtk.IconSize.MENU)
        self._button.add(image)
        self._button.connect("clicked", self._on_close_clicked)
 
        # make button as small as possible
        self._button.set_size_request(0, 0)
        data =  ".button {\n" \
		        "-GtkButton-default-border : 0px;\n" \
		        "-GtkButton-default-outside-border : 0px;\n" \
		        "-GtkButton-inner-border: 0px;\n" \
		        "-GtkWidget-focus-line-width : 0px;\n" \
		        "-GtkWidget-focus-padding : 0px;\n" \
		        "padding: 0px;\n" \
	            "}"
        context = self._button.get_style_context()
        provider = Gtk.CssProvider()
        provider.load_from_data(data)
        context.add_provider(provider, 600) # GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
        
        self._button.show_all()
        self.pack_start(self._button, False, False, 0)
        
        # busy indicator
        self._busy = Gtk.Spinner()
        self.pack_start(self._busy, False, False, 0)
        
    def _on_close_clicked(self, button, data=None):
        """ user clicked the close icon """
        self.emit("close-clicked", None)
        
    def set_busy(self, busy):
        if busy:
            self._button.hide()
            self._busy.show()
            self._busy.start()
        else:
            self._busy.stop()
            self._busy.hide()
            self._button.show()
        
    def get_icon(self):
        return self._icon
    
    def set_icon_from_stock(self, stock_id):
        self._icon.set_from_stock(stock_id, Gtk.IconSize.MENU)
    
    def set_icon_from_icon_name(self, icon_name):
        self._icon.set_from_icon_name(icon_name, Gtk.IconSize.MENU)
            
    def get_label_text(self, label_text):
        return self._label.get_text()
        
    def set_label_text(self, label_text):
        self._label.set_text(label_text)
    
    
